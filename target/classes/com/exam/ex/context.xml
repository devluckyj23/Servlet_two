<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
		<!-- <bean id="ma1" class="com.exam.ex.Myapp">
			객체를 만들어서 설정하는 내용을 추가해주기
			myService 속성의 값으로 스프링에 "msk"라는 이름으로 등록된 객체를 저장(주입)
			<property name="myService" ref="msk"></property>
		</bean>
		<bean id="ma2" class="com.exam.ex.Myapp">
			객체를 만들어서 설정하는 내용을 추가해주기
			myService 속성의 값으로 스프링에 "msk"라는 이름으로 등록된 객체를 저장(주입)
			<property name="myService" ref="mse"></property>
		</bean>
		우리가 이 bean태그를 사용하려면 id를 지정해줘야 함	
		com.exam.ex.Myapp클래스의 객체를 생성(new)하여 "ma"라는 이름으로 스프링에 등록
		
		<bean id="msk" class="com.exam.ex.MyServiceKo" />	
		com.exam.ex.Myapp클래스의 객체를 생성(new)하여 "msk"라는 이름으로 스프링에 등록
		
		<bean id="mse" class="com.exam.ex.MyServiceEn" />	
		com.exam.ex.Myapp클래스의 객체를 생성(new)하여 "mse"라는 이름으로 스프링에 등록 -->
		
		
		<!-- "com.exam.ex"하위에 있는 모든 클래스를 검하여 
		@Component, @Controller, @Service, @Repository, @Configuration가 붙어있는 클래스들을 
		자동으로 스프링에 등록함 (여기서 com만 적는다면 com 밑의 하위폴더들을 다 조사함)-->
		<context:component-scan base-package="com.exam.ex"></context:component-scan>
		
		<!-- advice : 키워넣을 코드 -->
		<!-- bean id="adv" class="com.exam.ex.MyAdvice" />
			<aop:config>
				pointcut : 코드를 끼워넣을 지점
				포인트컷 표현식 : execution((경우에 따라 접근자타입)반환타입 패키지.클래스명.메서드명(파라미터타입,(경우에 따라 예외타입)))
				<aop:pointcut id="tm" expression="execution(* com.exam.ex.My*.*(..))" />
					* : 반환값 타입 = 아무 값이나 괜찮음 
					메소드 이름도 상관없이 모든 메소드를 적용시키고 싶다면 *인 와일드카드를 사용해주면 됨
				<aop:aspect ref="adv">
				aspect : 어떤 advice를 어떤 pointcut에 끼워넣을지 설정
					<aop:before pointcut-ref="tm" method="beforeTargetMethod" />
					스프링에 adv라는 이름으로 등록된 객체의 beforeTargetMethod 메소드를 
						tm이라는 이름으로 등록된 포인트컷 실행 전에 끼워넣도록 설정
				</aop:aspect>
			</aop:config> -->
		
		<!-- @Aspect 같은 어노테이션을 이용햔 AOP 설정 기능 활성화 -->
		<aop:aspectj-autoproxy/>
		
</beans>
